MIN 2D Graphics Engine
Draft 1
Sun Aug 15 11:52:35 EDT 2004
Bob Walton
walton@acm.org

This document is a draft specification of the Minimal Descriptive Programming
Language (MIN) 2D graphics engine.

INTRODUCTION

The 2D engine draws a `virtual world' which is 3D with limits.  This world
contains:

	ground		A set of points (gx, gy, gz) where gravity is always
			in the negative gz direction, so gz is height.

	view		A view is a 2D image of the ground and other things.
			More specifically, a view is a rectangle of pixels
			which may be much bigger than what can be displayed
			at one time.  For each pixel the following is given:

			    (x,y) coordinates of the pixel in the view

			    z coordinate: distance from camera of pixel

			    vgz coordinate: distance from camera of ground
			        point that would be seen by camera if there
				were no obstruction; if vgz = z then there
				is in fact no obstruction and the camera is
				looking at the ground for this pixel

			    an ARGB color value for what is visible; here
			    A is an alpha value that says the visible color
			    equals A * forground color + ( 1 - A ) ground
			    color

			    forbidden flag: set of a ground object (see below)
			    is not permitted to be at the ground point that
			    would be visible at this pixel position were there
			    no obstruction

			    segment list: list of segments (see below) that
			    are near to this pixel (details below), and for
			    each segment the distance of this pixel to the
			    segment

			Note that the (gx,gy,gz) coordinates of the ground
			point that would be visible were there no obstruction
			can be computed from (and are a linear or projective
			linear function of) the (x,y,vgz) coordinates for the
			pixel.

	ground object	This is an object that has a contact point on the
			ground and moves along the ground.  More specifically,
			a ground object has:

			    a ground contact point (gx,gy,gz)

			    rotation angle R; the direction in the (gx,gy)
			    plane that the object is facing.  R = 0 if the
			    object is facing the positive gx direction.

			    height H; the object can jump above its contact
			    point

			    a configuration graph; this is a directed graph
			    of configurations, where a configuration is
			    intuitively a position of the ground object when
			    it is facing in the positive gx direction.  The
			    arrows in this graph are transitions from one
			    configuration to another.  A loop of 20 configur-
			    ations could be use, for example, to represent a
			    20 frame walking loop.

			        Each configuration has:

				    stop flag; set if the object can stop in
				    this configuration.  If not set, there
				    must be exactly one arrow leaving this
				    configuration, and the renderer will follow
				    this arrow to prevent the object from
				    stopping in this configuration.

				    a graphic surface, which is a rectangular
				    array of pixels each with an ARGB value,
				    where A is an alpha value used for
				    blending by the formula

				    	color = A * (configuration color )
					    + ( 1 - A ) * (background color )

				    where color is one of R, G, or B

				Each arrow has:

				    (dgx,dgy,dgz) change in contact point when
				    arrow is followed.  Intuitively this
				    means that changing to another configura-
				    tion moves the contact point.  However,
				    the renderer will only use this as an
				    approximation.

	forground object    This is an object that is drawn on top of a view
			    and modifies the view.  E.g., an open door as
			    opposed to a closed door.  It is just a small
			    view that is used to replace a piece of a larger
			    view temporarily.

	segment		    A segment just has an identifier naming the
			    segment.  A message to the program can be
			    triggered when the contact point of a ground
			    object moves to a pixel whose segment list
			    contains a segment that was not in the segment
			    list of the last contact point of the object. 
		
			    Conceptually segments are most frequently possibly
			    curved line segments.  Example segments would be
			    walls an object cannot move though, doors that
			    might open automatically, invisible boundaries
			    between regions, etc.
