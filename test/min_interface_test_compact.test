
Initialize!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    begin_stub_region >= (min::stub *) min::internal::stub_base => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
TEST INITIALIZE CALLED

Start Test!

Start Number Types Test!
Check that uns64 is 64 bits long:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    f64 != 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    f64 == 0 => true

Finish Number Types Test!

Start Internal Pointer Conversion Test!

Test ptr/uns64 conversions:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    b64 == buffer => true

Test stub/unsgen conversions:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sgen == stub => true

Finish Internal Pointer Conversion Test!

Start General Value Constructor//Test/Read Function Test!

Test stub general values:
stub: 0
stubgen: new_stub_gen ( MINT::null_stub )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_stub ( stubgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( stubgen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::stub_of ( stubgen ) == stub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_stub ( stubgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( stubgen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( stubgen ) == min::GEN_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::stub_of ( stubgen ) == stub => true

Test direct integer general values:
igen: -8434
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_direct_int ( igen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( igen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::direct_int_of ( igen ) == i => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_direct_int ( igen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( igen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( igen ) == min::GEN_DIRECT_INT => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::direct_int_of ( igen ) == i => true
min_interface_test.cc:XXXX desire failure:
    igen = min::new_direct_int_gen ( 1 << 28 );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_direct_int_gen(int):
    GEN_MIN_INT <= v && v <= GEN_MAX_INT => false
    argument is not direct integer
min_interface_test.cc:XXXX desire success:
    igen = min::new_direct_int_gen ( 1 << 27 );
min_interface_test.cc:XXXX desire failure:
    igen = min::new_direct_int_gen ( -1 << 29 );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_direct_int_gen(int):
    GEN_MIN_INT <= v && v <= GEN_MAX_INT => false
    argument is not direct integer
min_interface_test.cc:XXXX desire success:
    igen = min::new_direct_int_gen ( -1 << 28 );
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::direct_int_of ( igen ) == -1 << 28 => true

Test direct string general values:
strgen: "ABC"
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_direct_str ( strgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( strgen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( strgen ) == min::GEN_DIRECT_STR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( str, value.str ) == 0 => true
min_interface_test.cc:XXXX desire success:
    strgen = min::new_direct_str_gen ( str );
min_interface_test.cc:XXXX desire failure:
    strgen = min::new_direct_str_gen ( overflowstr );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_direct_str_gen(const char*):
    strlen ( p ) <= 3 => false
    string argument too long
strngen: "AB"
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_direct_str ( strngen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( strngen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( strngen ) == min::GEN_DIRECT_STR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( str, value.str, 2 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    value.str[2] == 0 => true
min_interface_test.cc:XXXX desire success:
    strngen = min::new_direct_str_gen ( str, 2 );
min_interface_test.cc:XXXX desire failure:
    strngen = min::new_direct_str_gen ( overflowstrn, strlimit + 1 );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_direct_str_gen(const char*, min::unsptr):
    internal::strnlen ( p, n ) <= 3 => false
    string argument too long

Test list aux general values:
listauxgen: LIST_AUX(734523)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_list_aux ( listauxgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( listauxgen ) == 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( listauxgen ) == min::GEN_LIST_AUX => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::list_aux_of ( listauxgen ) == aux => true
min_interface_test.cc:XXXX desire success:
    listauxgen = min::new_list_aux_gen ( aux );
min_interface_test.cc:XXXX desire failure:
    listauxgen = min::new_list_aux_gen ( (min::unsgen) 1 << min::VSIZE );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_list_aux_gen(min::unsgen):
    p < (unsgen) 1 << VSIZE => false
    argument too large
re-listauxgen: LIST_AUX(963921)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_list_aux ( listauxgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( listauxgen ) == 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::list_aux_of ( listauxgen ) == reaux => true

Test sublist aux general values:
sublistauxgen: SUBLIST_AUX(734523)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist_aux ( sublistauxgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( sublistauxgen ) == 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( sublistauxgen ) == min::GEN_SUBLIST_AUX => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::sublist_aux_of ( sublistauxgen ) == aux => true
min_interface_test.cc:XXXX desire success:
    sublistauxgen = min::new_sublist_aux_gen ( aux );
min_interface_test.cc:XXXX desire failure:
    sublistauxgen = min::new_sublist_aux_gen ( (min::unsgen) 1 << min::VSIZE );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_sublist_aux_gen(min::unsgen):
    p < (unsgen) 1 << VSIZE => false
    argument too large

Test indirect aux general values:
indirectauxgen: INDIRECT_AUX(734523)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_indirect_aux ( indirectauxgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( indirectauxgen ) == 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( indirectauxgen ) == min::GEN_INDIRECT_AUX => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::indirect_aux_of ( indirectauxgen ) == aux => true
min_interface_test.cc:XXXX desire success:
    indirectauxgen = min::new_indirect_aux_gen ( aux );
min_interface_test.cc:XXXX desire failure:
    indirectauxgen = min::new_indirect_aux_gen ( (min::unsgen) 1 << min::VSIZE );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_indirect_aux_gen(min::unsgen):
    p < (unsgen) 1 << VSIZE => false
    argument too large

Test index general values:
indexgen: INDEX(734523)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_index ( indexgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( indexgen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( indexgen ) == min::GEN_INDEX => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::index_of ( indexgen ) == index => true
min_interface_test.cc:XXXX desire success:
    indexgen = min::new_index_gen ( index );
min_interface_test.cc:XXXX desire failure:
    indexgen = min::new_index_gen ( (min::unsgen) 1 << min::VSIZE );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_index_gen(min::unsgen):
    i < (unsgen) 1 << VSIZE => false
    argument too large

Test control code general values:
codegen: CONTROL_CODE(0x7e005f)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_control_code ( codegen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( codegen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( codegen ) == min::GEN_CONTROL_CODE => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::control_code_of ( codegen ) == code => true
min_interface_test.cc:XXXX desire success:
    codegen = min::new_control_code_gen ( code );
min_interface_test.cc:XXXX desire failure:
    codegen = min::new_control_code_gen ( (min::unsgen) 1 << min::VSIZE );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_control_code_gen(min::unsgen):
    c < (unsgen) 1 << VSIZE => false
    argument too large

Test special general values:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( min::MISSING() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( min::MISSING() ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( min::ANY() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( min::ANY() ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( min::MULTI_VALUED() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( min::MULTI_VALUED() ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( min::UNDEFINED() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( min::UNDEFINED() ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( min::SUCCESS() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( min::SUCCESS() ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( min::FAILURE() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( min::FAILURE() ) == 1 => true
specialgen: SPECIAL(0x7e005f)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_special ( specialgen ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_tests ( specialgen ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::gen_subtype_of ( specialgen ) == min::GEN_SPECIAL => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::special_index_of ( specialgen ) == special => true
min_interface_test.cc:XXXX desire success:
    specialgen = min::new_special_gen ( special );
min_interface_test.cc:XXXX desire failure:
    specialgen = min::new_special_gen ( (min::unsgen) 1 << min::VSIZE );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::new_special_gen(min::unsgen):
    i < (unsgen) 1 << VSIZE => false
    argument too large

Finish General Value Constructor//Test/Read Function Test!

Start Control Value Test!

Test controls sans stub addresses:
control1: 858100000460e307
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control1 ) == type1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::value_of_control ( control1 ) == v1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control1 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control1 & loflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control1 & midflag ) => true
re-control1: 7f8100000460e307
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control1 ) == type2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::value_of_control ( control1 ) == v1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control1 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control1 & loflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control1 & midflag ) => true
re-control1: 7f81000004fcb508
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control1 ) == type2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::value_of_control ( control1 ) == v2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control1 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control1 & loflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control1 & midflag ) => true

Test non-acc controls with stub addresses:
control2: 8580000000000000
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control2 ) == type1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::stub_of_control ( control2 ) == stub1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control2 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control2 & loflag ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control2 & midflag ) => true
re-control2: 8580000000000010
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control2 ) == type1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::stub_of_control ( control2 ) == stub2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control2 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control2 & loflag ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control2 & midflag ) => true

Test acc controls with stub addresses:
control3: 8580000000000000
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control3 ) == type1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::stub_of_acc_control ( control3 ) == stub1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control3 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control3 & loflag ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control3 & midflag ) => true
re-control3: 8580000000000010
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::type_of_control ( control3 ) == type1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::stub_of_acc_control ( control3 ) == stub2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    control3 & hiflag => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control3 & loflag ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! ( control3 & midflag ) => true

Finish Control Value Test!

Start Stub Functions Test!

Test stub value set/read functions:
u: 9047814326432464
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::value_of ( stub ) == u => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::float_of ( stub ) == f => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::gen_of ( stub ) == g => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::ptr_of ( stub ) == p => true

Test stub control set/read functions:
c: 81000000000000
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::control_of ( stub ) == c => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub ) == 0 => true
c: 481000000000000
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::control_of ( stub ) == c => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub ) == min::NUMBER => true

Test stub flag set/clear/read functions:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::test_flags_of ( stub, f1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::test_flags_of ( stub, f2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::test_flags_of ( stub, f1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! MUP::test_flags_of ( stub, f2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::test_flags_of ( stub, f1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::test_flags_of ( stub, f2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::control_of ( stub ) == c => true

Test stub ACC related functions:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_collectible ( min::NUMBER ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::is_collectible ( min::LIST_AUX ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::is_deallocated ( stub ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_deallocated ( stub ) => true

Finish Stub Functions Test!

Start Process Interface Test!

Test interrupt function:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::interrupt_count == count => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::interrupt_count == count + 1 => true

Finish Process Interface Test!

Start Allocator/Collector/Compactor Interface Test!

optimal_body_size ( 53 ) = 56

Test mutator functions:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MINT::acc_stack == ::acc_stack => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MINT::acc_stack == ::acc_stack + 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::acc_stack[0] == &s1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::acc_stack[1] == &s2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MINT::acc_stack == ::acc_stack + 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MINT::acc_stack == ::acc_stack + 2 => true

Test stub allocator functions:
initial stubs allocated = 29
MINT::acc_expand_stub_free_list (1) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub1 == begin_stub_region + sbase => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub1 == MINT::last_allocated_stub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stubs_allocated == sbase + 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub1 ) == min::ACC_FREE => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! MUP::test_flags_of ( stub1, unmarked_flag ) => true
MINT::acc_expand_stub_free_list (1) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub2 == MINT::last_allocated_stub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stubs_allocated == sbase + 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub2 == begin_stub_region + sbase + 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub2 ) == min::ACC_FREE => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::test_flags_of ( stub2, unmarked_flag ) => true
MINT::acc_expand_stub_free_list (2) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stubs_allocated == sbase + 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub2 == MINT::last_allocated_stub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub3 == begin_stub_region + sbase + 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stubs_allocated == sbase + 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub2 == MINT::last_allocated_stub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub4 == begin_stub_region + sbase + 2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stubs_allocated == sbase + 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    stub4 == MINT::last_allocated_stub => true

Test body allocator functions:
MINT::min_fixed_block_size = 16 MINT::max_fixed_block_size = 131072
MINT::new_fixed_body ( stub XXX, 128 ) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( p1, p2, 128 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    p1 != p2 => true
MINT::new_fixed_body ( stub XXX, 128 ) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( p3, p4, 128 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    p3 != p4 => true
resize_body ( stub XXX, 128, 128 ) called
MINT::acc_expand_stub_free_list (1) called
MINT::new_fixed_body ( stub XXX, 128 ) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
MINT::deallocate ( stub XXX, 128 ) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( p3, p5, 128 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    p4 != p5 => true
MINT::deallocate ( stub XXX, 128 ) called
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub4 ) == min::DEALLOCATED => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    p5 != p6 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    p6[0] == 0 && memcmp ( p6, p6+1, 127 ) == 0 => true

Test General Value Locators:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    find_ptr_locator ( & (const min::stub * &) min::error_message ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    find_gen_locator ( & (min::gen &) staticg1[0] ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    find_gen_locator ( & (min::gen &) staticg2[0] ) == MIN_IS_COMPACT => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    find_gen_locator ( & (min::gen &) staticg1[2] ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    find_gen_locator ( & (min::gen &) g3[4] ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_locators() == 5 + 3 * MIN_IS_COMPACT + locatable_gen_count => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    count_gen_locators() == locatable_gen_count => true

Finish Allocator/Collector/Compactor Interface Test!

Start Numbers Test!

Test number create/test/read functions:
n1: 12345
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_num ( n1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( n1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::int_of ( n1 ) == 12345 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::float_of ( n1 ) == 12345 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::float_of ( n1 ) == 12345 => true
n1hash: 7900e7ec
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    n1hash == min::floathash ( 12345 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    n1hash == min::hash ( n1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_num_gen ( 12345 ) == n1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_num ( n2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( n2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::float_of ( n2 ) == 1.2345 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::float_of ( n2 ) == 1.2345 => true
n2hash: 4b952bc9
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    n2hash == min::floathash ( 1.2345 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    n2hash == min::hash ( n2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_num_gen ( 1.2345 ) == n2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_num ( n3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( n3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::int_of ( n3 ) == 1 << 30 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::float_of ( n3 ) == 1 << 30 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::float_of ( n3 ) == 1 << 30 => true
n3hash: 6a5fea4f
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    n3hash == min::floathash ( 1 << 30 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    n3hash == min::hash ( n3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_num_gen ( 1 << 30 ) == n3 => true

Finish Numbers Test!

Start Strings Test!

Test string hash:
s13hash: 5a78f047
s8hash: 240be104
s7hash: 5d443044
s3hash: 20440042
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strnhash ( s13, 8 ) == s8hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strnhash ( s13, 3 ) == s3hash => true

Test string general values:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_str_gen ( s13, 8 ) == strgen8 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_str_gen ( s13, 20 ) == strgen13 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_str ( strgen3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( strgen3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_direct_str ( strgen3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_str ( strgen7 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( strgen7 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_stub ( strgen7 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_str ( strgen8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( strgen8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_stub ( strgen8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_str ( strgen13 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( strgen13 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_stub ( strgen13 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( strgen3 ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( strgen3 ) == s3hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash ( strgen3 ) == s3hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s3 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s3, strgen3 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_str_gen ( buffer ) == strgen3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    buffer[2] == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strncmp ( buffer, strgen3, 2 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( strgen7 ) == 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( strgen7 ) == s7hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash ( strgen7 ) == s7hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s7 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s7, strgen7 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_str_gen ( buffer ) == strgen7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    buffer[6] == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strncmp ( buffer, strgen7, 6 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( strgen8 ) == 8 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( strgen8 ) == s8hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash ( strgen8 ) == s8hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s8 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s8, strgen8 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_str_gen ( buffer ) == strgen8 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    buffer[7] == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strncmp ( buffer, strgen8, 7 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( strgen13 ) == 13 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( strgen13 ) == s13hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash ( strgen13 ) == s13hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s13, strgen13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_str_gen ( buffer ) == strgen13 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    buffer[12] == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strncmp ( buffer, strgen13, 12 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( v.s, "ABC" ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( v.s, "ABCDEFG" ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( v.s, "ABCDEFGH", 8 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( v.s, "ABCDEFGH", 8 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhead ( min::MISSING() ) == 0 => true

Test unprotected string functions:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub7 ) == min::SHORT_STR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( u.buf, s7 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub8 ) == min::SHORT_STR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( u.buf, s8 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( stub13 ) == min::LONG_STR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::length_of ( lstr13 ) == 13 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::hash_of ( lstr13 ) == s13hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( MUP::str_of ( lstr13 ), s13 ) == 0 => true

Test protected string ptrs:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::body_size_of ( stub13 ) == sizeof ( MUP::long_str ) + 13 + 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( strgen13 ) == 13 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( strgen13 ) == s13hash => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s3, p3 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s7, p7 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s8, p8 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s13, p13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s3[0] == p3[0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s3[1] == p3[1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s3[2] == p3[2] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s3[3] == p3[3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s7[0] == p7[0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s7[6] == p7[6] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s7[7] == p7[7] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s8[0] == p8[0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s8[7] == p8[7] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s8[8] == p8[8] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s13[0] == p13[0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s13[12] == p13[12] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s13[13] == p13[13] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s3 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( buffer, s13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( buffer, p13, 5 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( buffer, p13, 6 ) != 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    buffer[4] == s13[4] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    buffer[5] == 'X' => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( p3 ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( p7 ) == 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( p8 ) == 8 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strlen ( p13 ) == 13 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( p3 ) == min::strhash ( s3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( p7 ) == min::strhash ( s7 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( p8 ) == min::strhash ( s8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strhash ( p13 ) == min::strhash ( s13 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( p13str_before, s13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    p13str_after != p13str_before => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strcmp ( s13, p13 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( s13, p ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( s8, p ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( s13, pb ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( s13, pc ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, s1234 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 1234 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, sm1234 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == -1234 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, s1234x ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, sm1234x ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, sempty ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, min::MISSING() ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 55 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, sA8, 16 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 168 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, s1234567890 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 1234567890 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, s12345678900 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 1234567890 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sli, s12345678901234567890 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sli == 12345678901234567890ull => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sli, s123456789012345678900 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sli, sempty ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sli == 12345678901234567890ull => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sf, s1e38 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sf == 1e38f => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sf, s1em37 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sf == 1e-37f => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sf, s1e39 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sf, s1em46 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sf, sempty ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sf == 1e-37f => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sd, s1e308 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sd == 1e308 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sd, s1em307 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sd == 1e-307 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sd, s1e308x ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sd, s1e309 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sd, s1em324 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sd, sempty ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sd == 1e-307 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, snumsp, j ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, snumsp, j ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == -2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    snumsp[j] == 'e' => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sd, snumsp, j ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sd == 3e10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sd, snumsp, j ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sd == -4e-10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    snumsp[j] == 'X' => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, snumsp, j ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == 5 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    snumsp[j] == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, sspace ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( sd, spoint ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, splus ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! min::strto ( si, sminus ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( si, sispace ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    si == -123 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::strto ( sd, sdspace ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sd == -123.4e-15 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s - sbuffer == 2*7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    len == 2*7 => true
ÀÁÂÃÄÅÆ
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    len == 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    u2 - Ubuffer2 == 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    s == sbuffer + 2 * 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( Ubuffer, Ubuffer2, sizeof ( Ubuffer ) ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    len == 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    Ubuffer2[6] == min::UNKNOWN_UCHAR => true
ÀÁÂÃÄÅ�

Finish Strings Test!

Start Labels Test!

Test label hash:
labhash1: 95375049

Test labels:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_lab ( lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_name ( lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_stub ( lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::labhash ( s ) == labhash1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::lablen ( s ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::labhash ( lab ) == labhash1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::lablen ( lab ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::body_size_of ( s ) == 3 * sizeof ( min::gen ) + sizeof ( MINT::lab_header ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash ( lab ) == labhash1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::labncpy ( labv2, s, 5 ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_lab_gen ( labv2, 3 ) == lab => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::labncpy ( labv2, lab, 5 ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::new_lab_gen ( labv2, 3 ) == lab => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp != min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp[0] == labv1[0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp[1] == labv1[1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp[2] == labv1[2] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::lablen ( labp ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::labhash ( labp ) == labhash1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::lablen ( labp ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp1 == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    labp2 == min::NULL_STUB => true
LABEL [< "Hello" 55 "End" >]
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    -1 == min::is_subsequence ( lab, labv1[0] ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    0 == min::is_subsequence ( labv1[0], labv1[0] ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    -1 == min::is_subsequence ( labv1[0], labv1[1] ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    0 == min::is_subsequence ( labv1[0], lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::is_subsequence ( labv1[1], lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    2 == min::is_subsequence ( labv1[2], lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    0 == min::is_subsequence ( lab, lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    -1 == min::is_subsequence ( min::new_str_gen ( "66" ), lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    0 == min::is_subsequence ( min::new_lab_gen ( labv1, 2 ), lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::is_subsequence ( min::new_lab_gen ( labv1 + 1, 2 ), lab ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    -1 == min::is_subsequence ( min::new_lab_gen ( labv2, 2 ), lab ) => true

Finish Labels Test!

Start Names Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
HASH of new_num_gen ( 1 ) = 3919206129
HASH of new_num_gen ( 2 ) = 3295440832
HASH of new_str_gen ( "str 1" ) = 3498587010
HASH of new_str_gen ( "str 2" ) = 3498587011
HASH of new_lab_gen ( { 1.0 }, 1 ) = 1239175266
HASH of new_lab_gen ( { 2.0 }, 1 ) = 615409969
HASH of new_lab_gen ( { 1.0, "str 1" }, 2 ) = 991637220
HASH of new_lab_gen ( { 1.0, "str 2" }, 2 ) = 991637221
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( num1, num1 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( num1, num2 ) < 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( num2, num1 ) > 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( str1, str1 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( str1, str2 ) < 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( str2, str1 ) > 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab11, lab11 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab11, lab12 ) < 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab12, lab11 ) > 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab21, lab21 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab11, lab21 ) < 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab21, lab11 ) > 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab21, lab21 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab21, lab23 ) < 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab23, lab21 ) > 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab23, lab23 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab23, lab24 ) < 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::compare ( lab24, lab23 ) > 0 => true

Finish Names Test!

Start Packed Structs Test!
ps1type.name = ps1type
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::packed_subtype_of ( v1 ) == ps1type.subtype => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::packed_subtype_of ( upv1 ) == ps1type.subtype => true
upv1->control = 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv1->i == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv1->i == 88 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
upv2->control = 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->i == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->j == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->i == 55 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->j == 99 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pv2->i == 55 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pv2->j == 99 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2 == min::stub_of ( v2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2 != min::stub_of ( v2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->i == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->j == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->i == 22 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->j == 44 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->i == 55 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv2->j == 99 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv1b == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv1b->i == 88 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv1->psp == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    upv1->psp->i == 88 => true

Finish Packed Structs Test!

Start Packed Vectors Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sizeof ( pve ) == 32 => true
pvtype.name = pvtype
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::packed_subtype_of ( v ) == pvtype.subtype => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::packed_subtype_of ( pvip ) == pvtype.subtype => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->max_length == 5 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvip[0])->j == 88 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp->length == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[0])->j == 88 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[1])->j == 11 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[2])->j == 22 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[3])->j == 33 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp->length == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp->max_length == 5 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp->length == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp->max_length == 10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( & e3, & e2[2], sizeof ( pve ) ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( e4, e2, 2 * sizeof ( pve ) ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->max_length == 10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->max_length == 15 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[0])->j == 11 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[1])->j == 22 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[2])->j == 33 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp != v => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvp == v => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[2])->j == 33 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip2 == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvip2[2])->j == 33 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->pvip == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvip[3])->j == 88 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvip[3])->j == 77 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    pvip->length == 7 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[4])->j == 11 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[5])->j == 22 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    (&pvp[6])->j == 33 => true

Finish Packed Vectors Test!

Start File Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line 1", ! & file1->buffer [min::next_line(file1)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line 2", ! & file1->buffer [min::next_line(file1)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line 3", ! & file1->buffer [min::next_line(file1)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::NO_LINE == min::next_line ( file1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line 2", ! & file1->buffer [min::line(file1,1)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line 0", ! & file2->buffer [min::next_line(file2)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line 1", ! & file2->buffer [min::next_line(file2)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::NO_LINE == min::next_line ( file2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    data_length == file3->buffer->length => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    data_length == file4->buffer->length => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( ! & file3->buffer[0], ! & file4->buffer[0], data_length ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line A", ! & file4->buffer [min::next_line(file4)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Line B", ! & file4->buffer [min::next_line(file4)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::NO_LINE == min::next_line ( file4 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    data == ostream.str() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    file4->buffer->length == file5->buffer->length => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strncmp ( ! & file4->buffer[0], ! & file5->buffer[0], file4->buffer->length ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    strcmp ( "Partial Line", ! & file5->buffer [min::next_line(file5)] ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::NO_LINE == min::next_line ( file5 ) => true

Finish File Test!

Start Identifier Map Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map->length == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map->occupied == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map->next == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find ( ::id_map, s1 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find_or_add ( ::id_map, s1 ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find ( ::id_map, s2 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find ( ::id_map, s3 ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find_or_add ( ::id_map, s3 ) == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map->length == 5 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map[0] == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map[1] == s1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map[2] == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map[3] == s2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map[4] == s3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map->occupied == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ::id_map->next == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find ( ::id_map, s1 ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find ( ::id_map, s2 ) == 3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::find_or_add ( ::id_map, s3 ) == 4 => true

Finish Identifier Map Test!

Start UNICODE Name Table Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == '\f' => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x7F => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x80 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0xAD => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == min::NO_UCHAR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == min::NO_UCHAR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x1234 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == min::NO_UCHAR => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x1234 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x5678 => true
min_interface_test.cc:XXXX desire success:
    min::add ( ::unicode_table, "YYYYY", 0x5678 );
min_interface_test.cc:XXXX desire failure:
    min::add ( ::unicode_table, "YYYYY", 0x1234 );
ASSERT FAILED: ../src/min.cc:XXXX:
    in void min::add(min::unicode_name_table, const char*, min::Uchar, bool):
    replace_allowed => false
    name already assigned to a different character
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x1234 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x5678 => true
min_interface_test.cc:XXXX desire success:
    min::add ( ::unicode_table, "YYYYY", 0x4321, true );
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x1234 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    c == 0x4321 => true

Finish UNICODE Name Table Test!

Start Printer Test!
123456 123456789
    A B C D E
    F1234
    ab
    123456789012345678901234567890
    B
<NUL><SOH><STX><ETX><EOT><ENQ><ACK><BEL><BS><HT><LF><VT><FF><CR><SO><SI>
    <DLE><DC1><DC2><DC3><DC4><NAK><SYN><ETB><CAN><EOM><SUB><ESC><FS><GS>
    <RS><US><SP><DEL><PAD><NBSP><UUC><UUC>
␀␁␂␃␄␅␆␇␈␉␊␋␌␍␎␏␐␑␒␓␔␕␖␗␘␙␚␛␜␝␞␟␣␡<PAD>␢␥␥
¡¢£¤¥¦§ ¨©ª«¬<SHY>®¯ °±²³´µ¶· ¸¹º»¼½¾¿
    ÀÁÂÃÄÅÆÇ ÈÉÊËÌÍÎÏ ÐÑÒÓÔÕÖ× ØÙÚÛÜÝÞß
    àáâãäåæç èéêëìíîï ðñòóôõö÷ øùúûüýþÿ
<0A1><0A2><0A3><0A4><0A5><0A6><0A7>
    <0A8><0A9><0AA><0AB><0AC><SHY><0AE><0AF>
    <0B0><0B1><0B2><0B3><0B4><0B5><0B6><0B7>
    <0B8><0B9><0BA><0BB><0BC><0BD><0BE><0BF>
    <0C0><0C1><0C2><0C3><0C4><0C5><0C6><0C7>
    <0C8><0C9><0CA><0CB><0CC><0CD><0CE><0CF>
    <0D0><0D1><0D2><0D3><0D4><0D5><0D6><0D7>
    <0D8><0D9><0DA><0DB><0DC><0DD><0DE><0DF>
    <0E0><0E1><0E2><0E3><0E4><0E5><0E6><0E7>
    <0E8><0E9><0EA><0EB><0EC><0ED><0EE><0EF>
    <0F0><0F1><0F2><0F3><0F4><0F5><0F6><0F7>
    <0F8><0F9><0FA><0FB><0FC><0FD><0FE><0FF>
¡¢£¤¥¦§␣¨©ª«¬<SHY>®¯␣°±²³´µ¶·␣¸¹º»¼½¾¿␣
    ÀÁÂÃÄÅÆÇ␣ÈÉÊËÌÍÎÏ␣ÐÑÒÓÔÕÖ×␣ØÙÚÛÜÝÞß␣
    àáâãäåæç␣èéêëìíîï␣ðñòóôõö÷␣øùúûüýþÿ
<0A1><0A2><0A3><0A4><0A5><0A6><0A7><SP>
    <0A8><0A9><0AA><0AB><0AC><SHY><0AE>
    <0AF><SP><0B0><0B1><0B2><0B3><0B4>
    <0B5><0B6><0B7><SP><0B8><0B9><0BA>
    <0BB><0BC><0BD><0BE><0BF><SP><0C0>
    <0C1><0C2><0C3><0C4><0C5><0C6><0C7>
    <SP><0C8><0C9><0CA><0CB><0CC><0CD>
    <0CE><0CF><SP><0D0><0D1><0D2><0D3>
    <0D4><0D5><0D6><0D7><SP><0D8><0D9>
    <0DA><0DB><0DC><0DD><0DE><0DF><SP>
    <0E0><0E1><0E2><0E3><0E4><0E5><0E6>
    <0E7><SP><0E8><0E9><0EA><0EB><0EC>
    <0ED><0EE><0EF><SP><0F0><0F1><0F2>
    <0F3><0F4><0F5><0F6><0F7><SP><0F8>
    <0F9><0FA><0FB><0FC><0FD><0FE><0FF>
hello␤
hello<NL>
   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17
      18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34
      35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51
      52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68
      69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85
      86  87  88  89  90  91  92  93  94  95  96  97  98  99
0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17
    18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34
    35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51
    52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68
    69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85
    86  87  88  89  90  91  92  93  94  95  96  97  98  99
A   B
    C
    A B
    C D
    E F G
    H I J
¡¢£¤¥¦§ ¨©ª«¬<SHY>®¯ °±²³´µ¶· ¸¹º»¼½¾¿
    ÀÁÂÃÄÅÆÇ ÈÉÊËÌÍÎÏ ÐÑÒÓÔÕÖ× ØÙÚÛÜÝÞß
    àáâãäåæç èéêëìíîï ðñòóôõö÷ øùúûüýþÿ
<UUC>
int32 -1 = -1
    int64 -2 = -2
    uns32 1 = 1
    uns64 2 = 2
    float64 1.23 = 1.23
    char 'A' = A
pint ( -3, "%05d" ) = -0003
    puns ( 3u, "%05u" ) = 00003
    pfloat ( 1.2345, "%04.2f" ) = 1.23
1
1.23456789
1.23456789012345
1.23457
1/3
0.333333
1 1/3
-1/3
-1 1/3
this is a string
"this<SP>is<SP>a<SP>string"
name
"name"
..name
...
"this<SP>is<SP>a<SP>string<SP>with<SP>a<SP>quote<SP>(<Q>)"
"this␣is␣a␣string␣with␣a␣quote␣(<Q>)"
this is a string with a quote (")
[< 5.6 [< 1.234 "str<SP>1" >] "str<SP>2" >]
A "," B / [< A "," B >]
MISSING
NONE
ANY
MULTI_VALUED
UNDEFINED
SUCCESS
FAILURE
ERROR
SPECIAL(0xABCDEF)
[$ SPECIAL(0x000111) $]
[$ MISSING $]
AUX_FREE
RELOCATE_BODY
TYPE(0)
[$ LIST_AUX(0x00000A) $]
[$ SUBLIST_AUX(0x000014) $]
[$ INDIRECT_AUX(0x00001E) $]
[$ INDEX(0x000028) $]
[$ CONTROL_CODE(0xFEDCBA) $]
[$ UNDEFINED_GEN(0x10000000) $]
[$ MISSING $] MISSING [$ MISSING $]
A flush is next:
The line being flushed
a␁      ␡<2400>␥
a<SOH>  <DEL><2400><UUC>
a<SOH><SP><HT><DEL><2400><UUC>
a␁␣␉␡<2400>␥
[ aaa, bbb, ccc, ddd, eee, fff, ggg ]
[ aaa, bbb,
  ccc, ddd,
  eee, fff,
  ggg ]
0    1    2
3    4
555  666
777
    A    B
    C    D
    E  FFF
  GGG  HHH
  III
{ aaa, bbb, [ ccc, ddd, eee, ( fff, ggg ), hhh ], iii, jjj }
{ aaa, bbb,
  [ ccc, ddd, eee, ( fff, ggg ),
    hhh ], iii, jjj }
(100, 200)
( 100, 200 )
(100, 200)
( 100, 200 )
(100, )
( 100, )
(100, )
( 100, )
The file has lines: test_file: lines 1-4
The last line is: test_file: line 4
Line 1
Line 2
Line 3

Line 2
<BLANK-LINE>
<END-OF-FILE>
<UNAVALABLE-LINE>
Phrase Print Test: test_file: lines 2-3
Line 2
     ^
Line 3
^^^^
Phrase Print Test: test_file: lines 3-5
Line 3
     #
<EMPTY>
#
<EOF>
#
Line 2␤
␤
<END-OF-FILE>
<UNAVALABLE-LINE>
Phrase Print Test: test_file: lines 2-3
Line 2␤
     ^^
Line 3␤
^^^^
Phrase Print Test: test_file: lines 3-5
Line 3␤
     ##
␤
#
<EOF>
#
ERROR: During attempt to find the size of file min_non_existent_file:
       No such file or directory

Finish Printer Test!

Start Objects Test!

Test short objects:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( sstub ) == min::SHORT_OBJ => true
sh: 2 sht: 100 sua: 920 sav: 0 saa: 0 st: 1022
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sht >= 100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sua >= 500 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    sav == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    saa == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    st == sh + sht + sav + sua + saa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::body_size_of ( sstub ) == st * sizeof ( min::gen ) => true

Test long objects:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next_body + m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::type_of ( lstub ) == min::LONG_OBJ => true
lh: 4 lht: 7000 lua: 70000 lav: 0 laa: 0 lt: 77004
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    lht >= 7000 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    lua >= 70000 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    lav == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    laa == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    lt == lh + lht + lav + lua + laa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    MUP::body_size_of ( lstub ) == lt * sizeof ( min::gen ) => true

Finish Objects Test!

Start Object Vector Level Test!

Test short object vector level:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) >= 20 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[ht] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[ht] == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash(vp,0) == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+0] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    attr ( vp, 0 ) == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+1] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+2] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+3] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+2] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+3] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    attr ( vp, 3 ) == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-1] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux ( vp, total_size-aa+1 ) == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa - 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-2] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-3] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-4] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-4] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-3] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-2] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux ( vp, total_size-aa+2 ) == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa - 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 8 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[0] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[2] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[3] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 4 => true
min_interface_test.cc:XXXX desire failure:
    outv[0] = min::attr_pop ( vp );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::attr_pop(min::obj_vec_insptr&):
    vp.attr_offset < vp.unused_offset => false
    no attribute left to pop
min_interface_test.cc:XXXX desire failure:
    min::attr_pop ( vp, 3, outv + 1 );
ASSERT FAILED: ../include/min.h:XXXX:
    in void min::attr_pop(min::obj_vec_insptr&, min::unsptr, min::gen*):
    vp.attr_offset + n <= vp.unused_offset => false
    less than n attributes left to pop
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[0] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[2] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[3] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 4 => true
min_interface_test.cc:XXXX desire failure:
    outv[0] = min::aux_pop ( vp );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::aux_pop(min::obj_vec_insptr&):
    vp.aux_offset < vp.total_size => false
    no aux element left to pop
min_interface_test.cc:XXXX desire failure:
    min::aux_pop ( vp, 3, outv + 1 );
ASSERT FAILED: ../include/min.h:XXXX:
    in void min::aux_pop(min::obj_vec_insptr&, min::unsptr, min::gen*):
    vp.aux_offset + n <= vp.total_size => false
    less than n aux elements left to pop
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == caa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset] == min::MISSING() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp[0] == min::MISSING() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp[0] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aux_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset + 1] == min::new_list_aux_gen ( total_size - aux_offset ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::var_size_of ( vp ) == 20 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) >= 10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == sstub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp[0] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aux_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset + 1] == min::new_list_aux_gen ( total_size - aux_offset ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) >= 10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    att_end == min::attr ( vp, attr_size - 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    aux_begin == min::aux ( vp, aux_size ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    att_end != min::SUCCESS() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    aux_begin != min::SUCCESS() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    att_end == min::attr ( vp, attr_size - 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::SUCCESS() == min::attr ( vp, attr_size ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    aux_begin == min::aux ( vp, aux_size ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::SUCCESS() == min::aux ( vp, aux_size + 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == sstub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::var_size_of ( vp ) == 20 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == min::NULL_STUB => true

Test long object vector level:
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) >= 20 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[ht] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[ht] == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::hash(vp,0) == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+0] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    attr ( vp, 0 ) == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+1] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+2] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+3] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+2] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[av+3] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    attr ( vp, 3 ) == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-1] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux ( vp, total_size-aa+1 ) == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa - 1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-2] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-3] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-4] == num0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-4] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-3] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aa-2] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux ( vp, total_size-aa+2 ) == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa - 4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 8 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[0] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[2] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[3] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == av + 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 4 => true
min_interface_test.cc:XXXX desire failure:
    outv[0] = min::attr_pop ( vp );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::attr_pop(min::obj_vec_insptr&):
    vp.attr_offset < vp.unused_offset => false
    no attribute left to pop
min_interface_test.cc:XXXX desire failure:
    min::attr_pop ( vp, 3, outv + 1 );
ASSERT FAILED: ../include/min.h:XXXX:
    in void min::attr_pop(min::obj_vec_insptr&, min::unsptr, min::gen*):
    vp.attr_offset + n <= vp.unused_offset => false
    less than n attributes left to pop
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[0] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[1] == num1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[2] == num2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    outv[3] == num3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::aux_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    caa == aa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == unused_size - 4 => true
min_interface_test.cc:XXXX desire failure:
    outv[0] = min::aux_pop ( vp );
ASSERT FAILED: ../include/min.h:XXXX:
    in min::gen min::aux_pop(min::obj_vec_insptr&):
    vp.aux_offset < vp.total_size => false
    no aux element left to pop
min_interface_test.cc:XXXX desire failure:
    min::aux_pop ( vp, 3, outv + 1 );
ASSERT FAILED: ../include/min.h:XXXX:
    in void min::aux_pop(min::obj_vec_insptr&, min::unsptr, min::gen*):
    vp.aux_offset + n <= vp.total_size => false
    less than n aux elements left to pop
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    cua == caa => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset] == min::MISSING() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp[0] == min::MISSING() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp[0] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aux_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset + 1] == min::new_list_aux_gen ( total_size - aux_offset ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next_body + m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::var_size_of ( vp ) == 20 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) >= 10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == sstub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp[0] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[aux_offset] == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    base[attr_offset + 1] == min::new_list_aux_gen ( total_size - aux_offset ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) >= 10 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next_body + m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::unused_size_of ( vp ) == 0 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    att_end == min::attr ( vp, attr_size - 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    aux_begin == min::aux ( vp, aux_size ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    att_end != min::SUCCESS() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    aux_begin != min::SUCCESS() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next_body + m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    att_end == min::attr ( vp, attr_size - 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::SUCCESS() == min::attr ( vp, attr_size ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    aux_begin == min::aux ( vp, aux_size ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::SUCCESS() == min::aux ( vp, aux_size + 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == min::NULL_STUB => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == sstub => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::var_size_of ( vp ) == 20 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    vp == min::NULL_STUB => true

Finish Object Vector Level Test!

Start Object List Level Test!

Test short object aux stubs list level:
 VORG 122 VSIZE 1924 USIZE 0 TSIZE 2046
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == base[vorg+0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == base[vorg+0] => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::next ( wlp ) ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::current ( wlp ) ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::current ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::peek ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::next ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_list_end ( min::current ( wslp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    3 == min::remove ( wlp, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wlp, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::LIST_END() => true

Test short object aux area list level:
 VORG 122 VSIZE 1924 USIZE 0 TSIZE 2046
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == base[vorg+0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == base[vorg+0] => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::next ( wlp ) ) => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::current ( wlp ) ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
RESIZE HAPPENED
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::current ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::peek ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::next ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_list_end ( min::current ( wslp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    3 == min::remove ( wlp, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wlp, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::LIST_END() => true

Test short object alternate aux list level:
 VORG 122 VSIZE 3972 USIZE 0 TSIZE 4094
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == base[vorg+0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( lp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( lp ) == base[vorg+0] => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ADDING 20 ELEMENTS TO UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::next ( wlp ) ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::current ( wlp ) ) => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
RESIZE HAPPENED
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
EMPTYING UNUSED AREA
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    resize_happened == ( ! use_obj_aux_stubs && resize ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::current ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::peek ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_sublist ( min::next ( wlp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num101 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num100 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wslp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wslp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wslp, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::is_list_end ( min::current ( wslp ) ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == numtest => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    3 == min::remove ( wlp, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == num102 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::peek ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::next ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    1 == min::remove ( wlp, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::LIST_END() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::current ( wlp ) == min::LIST_END() => true

Finish Object List Level Test!

Start Object Attribute Level Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == int1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == int1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == int2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == int3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == int4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr_size_of ( vp ) == 50 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::attr ( vp, 21 ) == min::EMPTY_SUBLIST() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == min::NONE() => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == lab1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == lab1 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == lab2 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == lab3 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::get ( ap ) == lab4 => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 8 ) => true
TEST ATTRIBUTE VALUES ( "label1", "label2")
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 8 ) => true
TEST ATTRIBUTE VALUES ( 3, "label1")
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 8 ) => true
TEST ATTRIBUTE VALUES ( [< 1 "label1" >], [< 1 "label2" >])
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 9 ) => true
TEST ATTRIBUTE VALUES ( [< 1 "label2" >], [< 1 "label1" >])
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 10 ) => true
TEST ATTRIBUTE VALUES ( [< "label1" 1 >], [< "label1" 2 >])
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 11 ) => true
TEST ATTRIBUTE VALUES ( [< "label1" 2 >], [< "label1" 1 >])
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2+1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values2, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 12 ) => true
TEST ATTRIBUTE FLAGS ( "label1", "label2", "label3")
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 4 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[0][0] && ! flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[0][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[0][3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[1][2] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[1][3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[1][4] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[4][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[1][2] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 4 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[0][0] && ! flag[1][3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[0][0] && ! flag[4][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[0][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
TEST ATTRIBUTE FLAGS ( "label2", 1, 2)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 4 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[0][0] && ! flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[0][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[0][3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[1][2] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[1][3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[1][4] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[4][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[1][2] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 5 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 4 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[4][1] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    ! flag[0][0] && ! flag[1][3] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[0][0] && ! flag[4][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 1 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    flag[0][0] => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_flags ( ap, codes1, 0 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 12 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    next + 2 * m <= end_body_region => true
TEST REVERSE ATTRIBUTE VALUES ( "label1", "label2", 1)
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 6 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 8 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 7 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 6 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+1, 4 ) => true
REMOVED 2
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1+2, 2 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 4 ) => true
REMOVED 1
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_values ( ap, values1, 3 ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    check_attr_info ( ap, ai, 12 ) => true

Finish Object Attribute Level Test!

Start Object Printing Test!

{}
{|1 2 3|}
{* 1, 2, 3, 4, 5 *}
[{* 1, 2, 3, 4, 5 *}; {* 1, 2, 3, 4, 5 *}; {* 1, 2, 3, 4, 5 *};
 {* 1, 2, 3, 4, 5 *}; {* 1, 2, 3, 4, 5 *}]
{T|A B C|T}
{T|A B C|}
    {T|A B C|T}
    {T|A B C|}
{T|A; B; C|T}
    {T|A B C:
       .separator = ";"
    |T}
A B C:
        .separator = ";"
        .type = "T"
{T: number = 123, .separator = ";"|A B C|T}
    {T|A B C:
       number = 123
       .separator = ";"
    |T}
{T: no scientific, number = 123, .separator = ";", fraction|A B C|T}
{"": myattr = [< "MYATTR" "VALUE" >], .initiator = [< "{" "*" >],
     .separator = ",", .terminator = [< "*" "}" >]|1 2 3 4 5|}
@1
@1 = 1 2 3 4 5:
         myattr = [< "MYATTR" "VALUE" >]
         .initiator = [< "{" "*" >]
         .separator = ","
         .terminator = [< "*" "}" >]
{"": myattr =
     {* [< "MYATTR" "THIRD" "VALUE" >], [< "MYATTR" "VALUE" >],
        [< "MYATTR" "SECOND" "VALUE" >] *}, .initiator = [< "{" "*" >],
     .separator = ",", .terminator = [< "*" "}" >]|1 2 3 4 5|}
{T: no scientific, number = 123, .separator = ";", myforward = @1
     <= myreverse, fraction|A B C|T}
{"": myattr =
     {* [< "MYATTR" "THIRD" "VALUE" >], [< "MYATTR" "VALUE" >],
        [< "MYATTR" "SECOND" "VALUE" >] *}, .initiator = [< "{" "*" >],
     myreverse = @2 <= myforward, .separator = ",", .terminator =
     [< "*" "}" >]|1 2 3 4 5|}

@2 = A B C:
         no scientific
         number = 123
         .separator = ";"
         myforward = @1 <= myreverse
         fraction
         .type = "T"
{T: no scientific, number = 123, .separator = ";", myforward[#aZ] = @1
     <= myreverse, fraction|A B C|T}
{"": myattr[#Z,64,512] =
     {* [< "MYATTR" "THIRD" "VALUE" >], [< "MYATTR" "VALUE" >],
        [< "MYATTR" "SECOND" "VALUE" >] *}, .initiator = [< "{" "*" >],
     myreverse = @2 <= myforward, .separator = ",", .terminator =
     [< "*" "}" >]|1 2 3 4 5|}
     {|1 2 3 4 5:
       myattr[#Z,64,512] = [< "MYATTR" "THIRD" "VALUE" >],
           [< "MYATTR" "VALUE" >], [< "MYATTR" "SECOND" "VALUE" >]
       .initiator = [< "{" "*" >]
       myreverse = @2 <= myforward
       .separator = ","
       .terminator = [< "*" "}" >]
     |}
1 2 3 4 5:
         myattr[#Z,64,512] = [< "MYATTR" "THIRD" "VALUE" >],
             [< "MYATTR" "VALUE" >], [< "MYATTR" "SECOND" "VALUE" >]
         .initiator = [< "{" "*" >]
         myreverse = @2 <= myforward
         .separator = ","
         .terminator = [< "*" "}" >]
{"": .initiator = [< "{" "*" >], myreverse = @2 <= myforward,
     .separator = ",", .terminator = [< "*" "}" >]|1 2 3 4 5|}
     {|1 2 3 4 5:
       .initiator = [< "{" "*" >]
       myreverse = @2 <= myforward
       .separator = ","
       .terminator = [< "*" "}" >]
     |}
1 2 3 4 5:
         myattr[#HZ,64,512] = [< "MYATTR" "THIRD" "VALUE" >],
             [< "MYATTR" "VALUE" >], [< "MYATTR" "SECOND" "VALUE" >]
         .initiator = [< "{" "*" >]
         myreverse = @2 <= myforward
         .separator = ","
         .terminator = [< "*" "}" >]
{T|X Y Z|T}
{+ X Y Z +}
{< X Y Z >}
{{ X Y Z 0 0 0 }}
"X" "Y" "Z" 0 0 0
Flag Parse Errors: `(,)_,34,5'
{T: A[*abcd,200] = "value"|X Y Z 0 0 0|T}
This is the top line:
    This is the first line "."
    This is the second line; This is the third line! This is the fourth
        line "."
    This is the fifth line "."

Finish Object Printing Test!

Start Object Debugging Test!

{* 1, 2, 3, 4, 5 *}
0 variables:
5 vector elements:
      0: 1
      1: 2
      2: 3
      3: 4
      4: 5
5 hash table:
      0: ( .initiator [< "{" * >] )
      1: ( )
      2: ( .separator "," )
      3: ( .terminator [< * "}" >] )
      4: ( )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::list_equal ( copy_obj, obj ) => true
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::list_equal ( copy_obj, obj ) => true
{"": Z = 1025, U = 1020, P = 1015, K = 1010, F = 1005, A = 1000,
     .initiator = [< "{" "*" >], V = 1021, Q = 1016, L = 1011, G = 1006,
     B = 1001, W = 1022, R = 1017, M = 1012, H = 1007, C = 1002,
     .separator = ",", X = 1023, S = 1018, N = 1013, I = 1008, D = 1003,
     .terminator = [< "*" "}" >], Y = 1024, T = 1019, O = 1014, J =
     1009, E = 1004|1 2 3 4 5|}
0 variables:
5 vector elements:
      0: 1
      1: 2
      2: 3
      3: 4
      4: 5
5 hash table:
      0: ( Z 1025 U 1020 P 1015 K 1010 F 1005 A 1000 .initiator
          [< "{" * >] )
      1: ( V 1021 Q 1016 L 1011 G 1006 B 1001 )
      2: ( W 1022 R 1017 M 1012 H 1007 C 1002 .separator "," )
      3: ( X 1023 S 1018 N 1013 I 1008 D 1003 .terminator [< * "}" >] )
      4: ( Y 1024 T 1019 O 1014 J 1009 E 1004 )
0 variables:
5 vector elements:
      0: 1
      1: 2
      2: 3
      3: 4
      4: 5
5 hash table:
      0: ( Z 1025 U 1020 P 1015 K 1010 F 1005 A 1000 .initiator
          [< "{" * >] )
      1: ( V 1021 Q 1016 L 1011 G 1006 B 1001 )
      2: ( W 1022 R 1017 M 1012 H 1007 C 1002 .separator "," )
      3: ( X 1023 S 1018 N 1013 I 1008 D 1003 .terminator [< * "}" >] )
      4: ( Y 1024 T 1019 O 1014 J 1009 E 1004 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::list_equal ( copy_obj, obj ) => true
0 variables:
5 vector elements:
      0: 1
      1: 2
      2: 3
      3: 4
      4: 5
5 hash table:
      0: ( Z 1025 U 1020 P 1015 K 1010 F 1005 A 1000 .initiator
          [< "{" * >] )
      1: ( V 1021 Q 1016 L 1011 G 1006 B 1001 )
      2: ( W 1022 R 1017 M 1012 H 1007 C 1002 .separator "," )
      3: ( X 1023 S 1018 N 1013 I 1008 D 1003 .terminator [< * "}" >] )
      4: ( Y 1024 T 1019 O 1014 J 1009 E 1004 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    min::list_equal ( copy_obj, obj ) => true
1 hash table:
      0: ( E 1004 J 1009 O 1014 T 1019 Y 1024 .terminator [< * "}" >] D
          1003 I 1008 N 1013 S 1018 X 1023 .separator "," C 1002 H 1007
          M 1012 R 1017 W 1022 B 1001 G 1006 L 1011 Q 1016 V 1021
          .initiator [< "{" * >] A 1000 F 1005 K 1010 P 1015 U 1020 Z
          1025 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( info, copy_info, info_length * sizeof ( info[0] ) ) == 0 => true
4 hash table:
      0: ( T 1019 D 1003 X 1023 H 1007 L 1011 P 1015 )
      1: ( E 1004 Y 1024 .terminator [< * "}" >] I 1008 M 1012 Q 1016
          .initiator [< "{" * >] A 1000 U 1020 )
      2: ( J 1009 N 1013 R 1017 B 1001 V 1021 F 1005 Z 1025 )
      3: ( O 1014 S 1018 .separator "," C 1002 W 1022 G 1006 K 1010 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( info, copy_info, info_length * sizeof ( info[0] ) ) == 0 => true
7 hash table:
      0: ( T 1019 M 1012 F 1005 )
      1: ( N 1013 G 1006 U 1020 )
      2: ( O 1014 H 1007 V 1021 A 1000 )
      3: ( I 1008 .separator "," W 1022 B 1001 P 1015 )
      4: ( J 1009 X 1023 C 1002 Q 1016 .initiator [< "{" * >] )
      5: ( Y 1024 .terminator [< * "}" >] D 1003 R 1017 K 1010 )
      6: ( E 1004 S 1018 L 1011 Z 1025 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( info, copy_info, info_length * sizeof ( info[0] ) ) == 0 => true
10 hash table:
      0: ( F 1005 P 1015 Z 1025 )
      1: ( G 1006 Q 1016 )
      2: ( H 1007 R 1017 )
      3: ( .terminator [< * "}" >] I 1008 S 1018 )
      4: ( J 1009 T 1019 )
      5: ( .initiator [< "{" * >] A 1000 K 1010 U 1020 )
      6: ( B 1001 L 1011 V 1021 )
      7: ( .separator "," C 1002 M 1012 W 1022 )
      8: ( D 1003 N 1013 X 1023 )
      9: ( E 1004 O 1014 Y 1024 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( info, copy_info, info_length * sizeof ( info[0] ) ) == 0 => true
13 hash table:
      0: ( N 1013 A 1000 )
      1: ( O 1014 B 1001 )
      2: ( C 1002 P 1015 )
      3: ( .terminator [< * "}" >] D 1003 .separator "," Q 1016 )
      4: ( E 1004 R 1017 )
      5: ( S 1018 F 1005 )
      6: ( T 1019 G 1006 )
      7: ( H 1007 .initiator [< "{" * >] U 1020 )
      8: ( I 1008 V 1021 )
      9: ( J 1009 W 1022 )
     10: ( X 1023 K 1010 )
     11: ( Y 1024 L 1011 )
     12: ( M 1012 Z 1025 )
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    memcmp ( info, copy_info, info_length * sizeof ( info[0] ) ) == 0 => true

Finish Object Debugging Test!
ASSERT SUCCEEDED: min_interface_test.cc:XXXX:
    deallocated_body_region[0] == 0 && memcmp ( deallocated_body_region, deallocated_body_region + 1, sizeof ( deallocated_body_region ) - 1 ) == 0 => true

Finished Test!
