// MIN Routines to Output UNICODE Type Tables
//
// File:	output_unicode_types.cc
// Author:	Bob Walton (walton@acm.org)
// Date:	Mon Jun 30 22:02:18 EDT 2014
//
// The authors have placed this program in the public
// domain; they make no warranty and accept no liability
// for this program.

// This file contains routines to output the MIN UNICODE
// database.  This file is to be `#include'd in other
// files such as make_unicode_types.cc and test_unicode_
// types.cc.

// Print unicode_types[i], list the unicode_index
// entries pointing at it, and print its name (if any)
// from unicode_names.
//
void print_unicode_type ( unsigned i )
{
    assert ( i < unicode_max_index );
    unicode_type & type = unicode_types[i];

    cout << "type " << i << ":" << endl;
    if ( type.name_length > 0 )
    {
        cout << "       name = `";
	for ( i = 0; i < type.name_length; ++ i )
	{
	    Uchar c = unicode_names[type.name+i];
	    assert ( ' ' < c && c < 0xFF );
	        // Currently only ASCII names are
		// supported.
	    cout << (char) c;
	}
	cout << "'" << endl;
    }
    cout << "       name_length = "
	 << (int) type.name_length << endl
	 << "       name_columns = "
	 << (int) type.name_columns << endl
	 << "       numerator = "
	 << type.numerator << endl
	 << "       denominator = "
	 << type.denominator << endl
	 << "       category = "
	 << type.category << endl
	 << "       reference count = "
	 << type.reference_count << endl;

    unsigned count = 0;
    for ( Uchar c = 0; c < unicode_index_size; ++ c )
    {
	if ( i != unicode_index[c] ) continue;

	Uchar c2 = c + 1;
	while ( c2 < unicode_index_size
		&&
		i == unicode_index[c2] )
	    ++ c2;

	count += (c2 - c );
	if ( c2 == c + 1 )
	    printf ( "       code = %02X\n", c );
	else
	    printf ( "       codes = %02X..%02X\n",
		     c, c2-1 );

	c = c2;
    }
    if ( count != type.reference_count )
        cout << "    ERROR: reference count should be"
	        " = " << count << endl;
}

void output ( void )
{
    ofstream out ( "unicode_types.cc" );
    if ( ! out )
    {
        cout << "ERROR: could not open unicode_types.cc"
	        " for output" << endl;
	exit ( 1 );
    }
    out << setiosflags ( ios_base::uppercase );

    out <<
      "// UNICODE Character Type Data\n"
      "//\n"
      "// File:	unicode_types.cc\n"
      "\n"
      "// Generated by make_unicode_types.cc\n";

    out <<
      "\n"
      "// UNICODE_CATEGORIES is the list of element\n"
      "// values of the unicode_categories vector\n"
      "// and UNICODE_CATEGORIES_SIZE is the size of\n"
      "// the vector.\n";

    out << endl
        << "# define UNICODE_CATEGORIES_SIZE "
        << unicode_categories_size << endl;

    out << endl << "# define UNICODE_CATEGORIES";
    for ( unsigned j = 0; j < unicode_categories_size;
                          ++ j )
    {
	unicode_category & d = unicode_categories[j];
	if ( j != 0 ) out << ",";
	out << " \\\n    { ";
	if ( d.unicode_name == NULL )
	    out << "NULL";
	else out << '"' << d.unicode_name << '"';
	out << ", '" << d.category << "', "
	    << '"' << d.unicode_description << '"'
	    << " }";
    }
    out << endl;

    out <<
      "\n"
      "// UNICODE_TYPES is the list of element values\n"
      "// of the unicode_types vector and UNICODE_\n"
      "// TYPES_SIZE is the size of the vector.\n";

    out << endl << "# define UNICODE_TYPES_SIZE "
        << unicode_max_index << endl;

    out << endl << "# define UNICODE_TYPES";

    for ( unsigned t = 0; t < unicode_max_index; ++ t )
    {
	unicode_type & type = unicode_types[t];
	char category[20];
	sprintf ( category, "%02X",
	          (short) type.category );
	if ( t != 0 ) out << ",";
        out << " \\\n    { 0x" << category
	    << ", " << type.name
	    << ", " << (short) type.name_length
	    << ", " << (short) type.name_columns
	    << ", " << type.numerator
	    << ", " << type.denominator
	    << ", " << type.reference_count
	    << " }";
    }
    out << endl;

    out <<
      "\n"
      "// UNICODE_NAMES is the list of element values\n"
      "// of the unicode_names vector and UNICODE_\n"
      "// NAMES_SIZE is the size of the vector.\n";

    out << endl << "# define UNICODE_NAMES_SIZE "
        << unicode_names_size << endl;

    out << endl << "# define UNICODE_NAMES ";
    for ( unsigned i = 0; i < unicode_names_size; ++ i )
    {
	char buf[20];
	Uchar c = unicode_names[i];
	if ( ' ' <= c && c < 0xFF )
	    sprintf ( buf, "'%c'", (char) c );
	else
	    sprintf ( buf, "%02X", c );

	if ( i != 0 ) out << ", ";
        if ( i % 5 == 0 ) out << "\\\n    ";
	out << setw ( 5 ) << buf;
    }
    out << endl;

    out <<
      "\n"
      "// UNICODE_INDEX is the list of element values\n"
      "// of the unicode_index vector and UNICODE_\n"
      "// INDEX_SIZE is the size of the vector.\n";

    out << endl << "# define UNICODE_INDEX_SIZE 0x"
        << hex << unicode_index_size << dec
	<< endl;

    out << endl << "# define UNICODE_INDEX ";
    for ( Uchar c = 0; c < unicode_index_size; ++ c )
    {
	if ( c != 0 ) out << ", ";
        if ( c % 8 == 0 ) out << "\\\n    ";
	out << setw ( 3 ) << unicode_index[c];
    }
    out << endl;

    out.close();
}
